{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:8080/api/users';\n      this.isAuthenticatedSubject = new BehaviorSubject(this.hasToken());\n      this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n    }\n    register(user) {\n      return this.http.post(`${this.apiUrl}/register`, user);\n    }\n    login(credentials) {\n      return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n        if (response.jwt) {\n          localStorage.setItem('jwt', response.jwt);\n          this.isAuthenticatedSubject.next(true);\n        }\n      }));\n    }\n    logout() {\n      localStorage.removeItem('jwt');\n      this.isAuthenticatedSubject.next(false);\n    }\n    getToken() {\n      return localStorage.getItem('jwt');\n    }\n    getUserProfile() {\n      const token = this.getToken();\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.get(`${this.apiUrl}/profile`, {\n        headers\n      });\n    }\n    updateUserProfile(user) {\n      const token = this.getToken();\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.put(`${this.apiUrl}/profile`, user, {\n        headers\n      });\n    }\n    hasToken() {\n      return !!localStorage.getItem('jwt');\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}