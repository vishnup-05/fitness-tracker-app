{"ast":null,"code":"import { provideRouter } from '@angular/router';\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { routes } from './app.routes';\nexport const appConfig = {\n  providers: [provideRouter(routes), provideHttpClient(withInterceptors([(req, next) => {\n    const token = localStorage.getItem('jwt');\n    if (token) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next(req);\n  }]))]\n};","map":{"version":3,"names":["provideRouter","provideHttpClient","withInterceptors","routes","appConfig","providers","req","next","token","localStorage","getItem","clone","setHeaders","Authorization"],"sources":["D:\\Projects\\GeminiCLI_PR\\fitness-app-frontend\\src\\app\\app.config.ts"],"sourcesContent":["import { ApplicationConfig } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\n\nimport { routes } from './app.routes';\nimport { AuthInterceptor } from './auth.interceptor';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideRouter(routes),\n    provideHttpClient(withInterceptors([\n      (req, next) => {\n        const token = localStorage.getItem('jwt');\n        if (token) {\n          req = req.clone({\n            setHeaders: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n        }\n        return next(req);\n      }\n    ]))\n  ]\n};"],"mappings":"AACA,SAASA,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,sBAAsB;AAE1E,SAASC,MAAM,QAAQ,cAAc;AAGrC,OAAO,MAAMC,SAAS,GAAsB;EAC1CC,SAAS,EAAE,CACTL,aAAa,CAACG,MAAM,CAAC,EACrBF,iBAAiB,CAACC,gBAAgB,CAAC,CACjC,CAACI,GAAG,EAAEC,IAAI,KAAI;IACZ,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;IACzC,IAAIF,KAAK,EAAE;MACTF,GAAG,GAAGA,GAAG,CAACK,KAAK,CAAC;QACdC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,KAAK;;OAEjC,CAAC;IACJ;IACA,OAAOD,IAAI,CAACD,GAAG,CAAC;EAClB,CAAC,CACF,CAAC,CAAC;CAEN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}