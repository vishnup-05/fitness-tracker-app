{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/users';\n    this.isAuthenticatedSubject = new BehaviorSubject(this.hasToken());\n    this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      if (response.jwt) {\n        localStorage.setItem('jwt', response.jwt);\n        this.isAuthenticatedSubject.next(true);\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem('jwt');\n    this.isAuthenticatedSubject.next(false);\n  }\n  getToken() {\n    return localStorage.getItem('jwt');\n  }\n  getUserProfile() {\n    const token = this.getToken();\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(`${this.apiUrl}/profile`, {\n      headers\n    });\n  }\n  updateUserProfile(user) {\n    const token = this.getToken();\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.put(`${this.apiUrl}/profile`, user, {\n      headers\n    });\n  }\n  hasToken() {\n    return !!localStorage.getItem('jwt');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","tap","AuthService","constructor","http","apiUrl","isAuthenticatedSubject","hasToken","isAuthenticated$","asObservable","register","user","post","login","credentials","pipe","response","jwt","localStorage","setItem","next","logout","removeItem","getToken","getItem","getUserProfile","token","headers","get","updateUserProfile","put","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\GeminiCLI_PR\\fitness-app-frontend\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8080/api/users';\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(this.hasToken());\n\n  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n\n  constructor(private http: HttpClient) { }\n\n  register(user: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n\n  login(credentials: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(\n      tap((response: any) => {\n        if (response.jwt) {\n          localStorage.setItem('jwt', response.jwt);\n          this.isAuthenticatedSubject.next(true);\n        }\n      })\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('jwt');\n    this.isAuthenticatedSubject.next(false);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('jwt');\n  }\n\n  getUserProfile(): Observable<any> {\n    const token = this.getToken();\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(`${this.apiUrl}/profile`, { headers });\n  }\n\n  updateUserProfile(user: any): Observable<any> {\n    const token = this.getToken();\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.put(`${this.apiUrl}/profile`, user, { headers });\n  }\n\n  private hasToken(): boolean {\n    return !!localStorage.getItem('jwt');\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALhB,KAAAC,MAAM,GAAG,iCAAiC;IAC1C,KAAAC,sBAAsB,GAAG,IAAIN,eAAe,CAAU,IAAI,CAACO,QAAQ,EAAE,CAAC;IAE9E,KAAAC,gBAAgB,GAAG,IAAI,CAACF,sBAAsB,CAACG,YAAY,EAAE;EAErB;EAExCC,QAAQA,CAACC,IAAS;IAChB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACP,MAAM,WAAW,EAAEM,IAAI,CAAC;EACxD;EAEAE,KAAKA,CAACC,WAAgB;IACpB,OAAO,IAAI,CAACV,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACP,MAAM,QAAQ,EAAES,WAAW,CAAC,CAACC,IAAI,CAC7Dd,GAAG,CAAEe,QAAa,IAAI;MACpB,IAAIA,QAAQ,CAACC,GAAG,EAAE;QAChBC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,QAAQ,CAACC,GAAG,CAAC;QACzC,IAAI,CAACX,sBAAsB,CAACc,IAAI,CAAC,IAAI,CAAC;MACxC;IACF,CAAC,CAAC,CACH;EACH;EAEAC,MAAMA,CAAA;IACJH,YAAY,CAACI,UAAU,CAAC,KAAK,CAAC;IAC9B,IAAI,CAAChB,sBAAsB,CAACc,IAAI,CAAC,KAAK,CAAC;EACzC;EAEAG,QAAQA,CAAA;IACN,OAAOL,YAAY,CAACM,OAAO,CAAC,KAAK,CAAC;EACpC;EAEAC,cAAcA,CAAA;IACZ,MAAMC,KAAK,GAAG,IAAI,CAACH,QAAQ,EAAE;IAC7B,MAAMI,OAAO,GAAG,IAAI5B,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU2B,KAAK;KACjC,CAAC;IACF,OAAO,IAAI,CAACtB,IAAI,CAACwB,GAAG,CAAC,GAAG,IAAI,CAACvB,MAAM,UAAU,EAAE;MAAEsB;IAAO,CAAE,CAAC;EAC7D;EAEAE,iBAAiBA,CAAClB,IAAS;IACzB,MAAMe,KAAK,GAAG,IAAI,CAACH,QAAQ,EAAE;IAC7B,MAAMI,OAAO,GAAG,IAAI5B,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU2B,KAAK;KACjC,CAAC;IACF,OAAO,IAAI,CAACtB,IAAI,CAAC0B,GAAG,CAAC,GAAG,IAAI,CAACzB,MAAM,UAAU,EAAEM,IAAI,EAAE;MAAEgB;IAAO,CAAE,CAAC;EACnE;EAEQpB,QAAQA,CAAA;IACd,OAAO,CAAC,CAACW,YAAY,CAACM,OAAO,CAAC,KAAK,CAAC;EACtC;;;uBAlDWtB,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXhC,WAAW;MAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}